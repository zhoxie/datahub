fragment relationshipFields on Entity {
    urn
    type
    ... on DataJob {
        ...dataJobFields
        ...dataJobRelationshipsLeaf
        editableProperties {
            description
        }
    }
    ... on DataFlow {
        orchestrator
        flowId
        cluster
        properties {
            name
            description
            project
        }
        ownership {
            ...ownershipFields
        }
        globalTags {
            ...globalTagsFields
        }
        glossaryTerms {
            ...glossaryTerms
        }
        editableProperties {
            description
        }
        domain {
            ...entityDomain
        }
    }
    ... on Dashboard {
        ...dashboardRelationshipsLeaf
        ...dashboardFields
        editableProperties {
            description
        }
    }
    ... on Chart {
        tool
        chartId
        properties {
            name
            description
        }
        editableProperties {
            description
        }
        ownership {
            ...ownershipFields
        }
        domain {
            ...entityDomain
        }
        ...chartRelationshipsLeaf
    }
    ... on Dataset {
        name
        properties {
            description
        }
        editableProperties {
            description
        }
        platform {
            ...platformFields
        }
        ownership {
            ...ownershipFields
        }
        subTypes {
            typeNames
        }
        ...datasetRelationshipsLeaf
    }
    ... on Datasource {
        name
        origin
        description
        platform {
             name
             info {
                 logoUrl
             }
         }
        ownership {
            ...ownershipFields
        }
        globalTags {
            ...globalTagsFields
        }
        region
        primaryConn {
            dataCenter
        }
        gsbConn {
            dataCenter
        }
    }
    ... on MLModelGroup {
        urn
        type
        name
        description
        origin
        platform {
            ...platformFields
        }
        ownership {
            ...ownershipFields
        }
    }
    ... on MLModel {
        urn
        type
        name
        description
        origin
        platform {
            ...platformFields
        }
        ownership {
            ...ownershipFields
        }
        ...mlModelRelationshipsLeaf
    }
}

fragment fullRelationshipResults on EntityRelationshipsResult {
    start
    count
    total
    relationships {
        type
        direction
        entity {
            ...relationshipFields
        }
    }
}

fragment leafRelationshipResults on EntityRelationshipsResult {
    start
    count
    total
    relationships {
        type
        direction
        entity {
            urn
            type
        }
    }
}

fragment dataJobRelationshipsLeaf on DataJob {
    incoming: relationships(
        input: { types: ["DownstreamOf", "Consumes", "Produces"], direction: INCOMING, start: 0, count: 100 }
    ) {
        ...leafRelationshipResults
    }
    outgoing: relationships(
        input: { types: ["DownstreamOf", "Consumes", "Produces"], direction: OUTGOING, start: 0, count: 100 }
    ) {
        ...leafRelationshipResults
    }
}

fragment datasetRelationshipsLeaf on Dataset {
    incoming: relationships(
        input: { types: ["DownstreamOf", "Consumes", "Produces"], direction: INCOMING, start: 0, count: 100 }
    ) {
        ...leafRelationshipResults
    }
    outgoing: relationships(
        input: { types: ["DownstreamOf", "Consumes", "Produces"], direction: OUTGOING, start: 0, count: 100 }
    ) {
        ...leafRelationshipResults
    }
}

fragment chartRelationshipsLeaf on Chart {
    inputs: relationships(input: { types: ["Consumes"], direction: OUTGOING, start: 0, count: 100 }) {
        ...leafRelationshipResults
    }
    dashboards: relationships(input: { types: ["Contains"], direction: INCOMING, start: 0, count: 100 }) {
        ...leafRelationshipResults
    }
}

fragment dashboardRelationshipsLeaf on Dashboard {
    charts: relationships(input: { types: ["Contains"], direction: OUTGOING, start: 0, count: 100 }) {
        ...leafRelationshipResults
    }
}

fragment mlModelRelationshipsLeaf on MLModel {
    incoming: relationships(
        input: {
            types: ["DownstreamOf", "Consumes", "Produces", "TrainedBy", "MemberOf"]
            direction: INCOMING
            start: 0
            count: 100
        }
    ) {
        ...leafRelationshipResults
    }
    outgoing: relationships(
        input: {
            types: ["DownstreamOf", "Consumes", "Produces", "TrainedBy", "MemberOf"]
            direction: OUTGOING
            start: 0
            count: 100
        }
    ) {
        ...leafRelationshipResults
    }
}

fragment mlModelGroupRelationshipsLeaf on MLModelGroup {
    incoming: relationships(
        input: {
            types: ["DownstreamOf", "Consumes", "Produces", "TrainedBy", "MemberOf"]
            direction: INCOMING
            start: 0
            count: 100
        }
    ) {
        ...leafRelationshipResults
    }
    outgoing: relationships(
        input: {
            types: ["DownstreamOf", "Consumes", "Produces", "TrainedBy", "MemberOf"]
            direction: OUTGOING
            start: 0
            count: 100
        }
    ) {
        ...leafRelationshipResults
    }
}
